#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass uwmthesis
\begin_preamble
\date{2016}
\title{Opracowanie automatycznego systemu chłodzącego stacji roboczej z wykorzystaniem Arduino}
\author{Michał Bartosz Ludwikowski}
\etitle{Developing automatic cooling system for workstation using Arduino}
\wykonanaw{katedrze Matematycznych Metod Informatyki}
\ewykonanaw{the Department of Mathematical Methods of Informatics}
\podkierunkiem{dra Krzysztofa Sopyły}
\epodkierunkiem{dr Krzysztof Sopyła}
\end_preamble
\options wmii,inf,inz
\use_default_options true
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\begin_layout Plain Layout


\backslash
tableofcontents
\end_layout

\end_inset


\end_layout

\begin_layout Chapter*
Streszczenie
\end_layout

\begin_layout Standard
Doskonale wiadomo iż elektronika, która otacza nas podczas pracy nagrzewa
 się.
 Jest to oczywiście zjawisko niekorzystne i nieporzadane w większości przypadków
, jeżeli nie we wszystkich.
 Komputery stacjonarne chłodzone są najczęściej powietrzem.
 Wykorzystuje się do tego radioatory i wentylatory.
 Ostatnimi czasy pojawiły się rozwiązania wykorzystujące ciecz do transportowani
a ciepła, te rozwiązania odprowadzają ciepło tylko z punktów, do których
 przyczepione są elementy układu chłodzącego.
 
\end_layout

\begin_layout Standard
Poniższa praca przedstawia zaprojektowanie oraz wykonanie automatycznego
 systemu chłodzącego, który odprowadza ciepło z całej powierzchni elektroniki
 poprzez zanurzenie jej w cieczy, która nie przewodzi prądu.
\end_layout

\begin_layout Standard
Rozwiązanie to pozwala na skuteczne odprowadzanie ciepła z podzespołów komputera
, oraz rozwiązuje problem utrzymywania porządku wewnątrz obudowy naszego
 komputera - problem przestaje istnieć.
\end_layout

\begin_layout Chapter*
Abstract
\end_layout

\begin_layout Standard
It is well known that the electronics that surrounds us at work and at home
 are overheating, getting warmer and warmer.
 This is obviously disadvantageous and undesirable phenomenon in most cases.
 Desktop Computers are usually cooled by air using these radiators and fans.
 There is a solution to our issue which is based on the fluid which transports
 heat.
 This solution is only conducting the heat from the points where cooling
 system components are mounted.
\end_layout

\begin_layout Standard
This paper presents the design and creation of automatic cooling system
 that draws heat away from the electronic parts of our Desktop, which entire
 surface is immersed in a liquid that does not conduct electricity.
\end_layout

\begin_layout Standard
This allows for efficient heat dissipation from computer components, and
 solves the problem of keeping computer parts dirt-free since they are submerged
 in a fluid.
 
\end_layout

\begin_layout Chapter
Wstęp
\end_layout

\begin_layout Section
Wprowadzenie
\end_layout

\begin_layout Standard
Chłodzenie podzespołów komputera to bardzo istotny aspekt poprawnej pracy
 stacji roboczej.
 W dzisiejszych czasach najpopularniejszym sposobem chłodzenia są zaawansowane
 radiatory chłodzone powietrzem aktywnie (zastosowanie wentylatora) lub
 pasywnie (brak wentylatora).
 Coraz popularniejsze stają się bloki wodne, które zastępując radiatory
 umożliwiają wymianę ciepła podzespołu z cieczą.
 Sposób ten pozwala jedynie na przekazanie ciepła z ograniczonych powierzchni
 elementów z których zbudowany są podzespoły komputera.
 Rozwiązaniem.
 które pozwoli zwiększyć te powierzchnie jest zanurzenie całego komputera
 w chłodziwie.
\end_layout

\begin_layout Section
Cel pracy
\end_layout

\begin_layout Standard
Niniejsza praca ma na celu przedstawienie procesu zaprojektowania oraz wykonania
 automatycznego systemu chłodzącego stację roboczą.
 W pracy poza opisami narzędzi takich jak Arduino wykorzystanych do realizacji
 projektu znajdziemy bogato ilustrowane opisy poszczególnych kroków dążących
 do stworzenia skutecznego systemu chłodzącego.
 Skuteczność systemu omówiona i podsumowana zostanie na wykresach temperatur
 podzespołów zebranych podczas wzmożonej pracy stacji roboczej.
 
\end_layout

\begin_layout Section
Układ pracy
\end_layout

\begin_layout Standard
W drugim rozdziale przedstawiony został proces projektowania i wykonania
 układu elektronicznego współpracującego z Arduino.
 Zawiera on schematy elektryczne układu pomiaru temperatury, układu sterowania
 pompy, układu wyświetlania danych.
\end_layout

\begin_layout Standard
Rozdział trzeci poświęcony został implementacji sterownika systemu chłodzenia.
 Znajdziemy w nim opis technologi oraz środowiska w którym został napisany,
 poglądowe diagramy przedstawiające ideę działania sterownika oraz kod wraz
 z obszernymi opisami.
\end_layout

\begin_layout Standard
Projekt systemu i sposób jego wykonania przedstawiony jest w rozdziale czwartym.
 Rozdział ten zawiera koncept pojemnika oraz dostosowania obudowy do potrzeb
 projektu.
 Proces wykonania systemu chłodzącego przedstawiony został na opisanych
 zdjęciach.
\end_layout

\begin_layout Standard
Kolejny rozdział traktuje o pomiarach temperatury podzespołów podczas obciążenia.
 Wyniki pomiarów zostały zestawione na czytelnych wykresach oraz porównane
 zostały do wyników tychże testów przeprowadzonych przed modernizacją.
\end_layout

\begin_layout Standard
Ostatni rozdział przedstawia możliwości optymalizacji osiągów stacji roboczej,
 wynikające z zastosowanego chłodzenia.
\end_layout

\begin_layout Chapter
Opis technologii wykorzystanych podczas realizacji projektu
\end_layout

\begin_layout Section
Arduino
\end_layout

\begin_layout Standard
Arduino jest platformą prototypową typu open source, opartą na łatwym w
 użyciu hrdware oraz software.
 Płytki Arduino są w stanie odczytywać dane różnego pochodzenia - światło
 padające na sensor, przyciśnięty przycisk, dane z sieci - i przekształcać
 je w żądane sygnały wyjścia - zapalenie diod LED, opublikowanie czegoś
 w sieci czy załączenie silnika.
\end_layout

\begin_layout Standard
Sama płytka Arduino jest mikrokontrolerem zamontowanym wraz z obsługą wejść/wyjś
ć na pojedynczym układzie drukowanym.
 Na urządzeniu znajdziemy kontroler, wygodne w użyciu, cufrowe i analogowe
 linie wejścia/wyjścia, interfejs UART lub USB do komunikacji z komputerem.
\end_layout

\begin_layout Standard
Celem projektu Arduino jest dostarczenie szerokiemu gronu ludzi narzędzi
 wykorzystywanych do tworzenia własnych interaktywnych projektów wymagających
 sterowania bądź
\begin_inset space \space{}
\end_inset

przetwarzania odbieranych sygnałów.
\end_layout

\begin_layout Section
Eagle
\end_layout

\begin_layout Standard
EAGLE (z ang.
 Easy Applicable Graphical Layout Editor) jest wszechstronnym oprogramowaniem
 do tworzenia projektów PCB (z ang.
 Printed Circuit Board).
 EAGLE wykorzystywany jest przez profesjonalistów pracujących dla światowych
 koncernów elektronicznych, hobbystów oraz studentów.
\end_layout

\begin_layout Standard
Oprogramowanie składa się z trzech modułów z identycznym interfejsem użytkownika
:
\end_layout

\begin_layout Itemize
edytor schematów - umożliwia tworzenie symbolicznych, czytelnych schematów,
 które wzbogacą dokumentację projektu,
\end_layout

\begin_layout Itemize
edytor układu elektronicznego - przy pomocy tego modułu zaprojektujemy układ
 gotowy do wydrukowania,
\end_layout

\begin_layout Itemize
autorouter - moduł automatycznego tworzenia ścieżek elektrycznych na projektowan
ym układzie elektronicznym.
\end_layout

\begin_layout Section
Fritzing
\end_layout

\begin_layout Standard
Fritzing to narzędzie służące do tworzenia schematów oraz rysunków poglądowych
 projektów elektronicznych.
 Fritzing jest narzędziem open source.
 Narzędzie to pozwala na tworzenie czytelnych profesjonalnych schematów,
 jednak to co wyróżnia to narzędzie to schematy poglądowe, które pokazują
 nam faktyczny wygląd skomponowanego układu.
 
\end_layout

\begin_layout Standard
Bogata biblioteka części różnych producentów (w tym Arduino), ciągle rośnie
 ze względu na możliwość dodawania własnych części i dzieleniem się nimi
 z innymi użytkownikami Fritzing.
 Oprogramowanie jest na licencji open source.
\end_layout

\begin_layout Section
Język programowania Arduino
\end_layout

\begin_layout Standard
Ardino pasiada własny jezyk, język programowania Arduino, który bazuje na
 środowisku Wiring oraz językach C/C++.
\end_layout

\begin_layout Subsection
Wiring
\end_layout

\begin_layout Standard
Wiring to platforma developerska, która jest podstawą języka programowania
 Arduino.
 Jest to platforma na licencji typu open-source złożona z języka programowania,
 zintegrowanego środowiska deweloperskiego oraz mikrokontrolera wbudowanego
 w jedą płytę (jak w przypadku Arduino).
 Wiring oparty został o projekt Processing, który jest językiem i zintegrowanym
 środowiskiem stworzonym na MIT (ang.
 Massachusetts Institute of Technology) Media Lab.
 Projekt Wiring rozpoczął się w 2003 roku w Instytucie Wzornictwa Interakcji
 Ivrea.
 Obecnie rozwijany w Szkole Architektury i Projektowania na Uniwersytecie
 Los Andes w Kolumbii.
 Wynalazcą platformy jest Hernando Barragán.
 Środowisko Wiring IDE zostało napisane w języku JAVA.
 Zaprojektowano je by wprowadzać elektroników, hobbystów i artystów do programow
ania elektroniki.
\end_layout

\begin_layout Section
Arduino Software (IDE)
\end_layout

\begin_layout Standard
Wgrywanie projektów na płytkę Arduino odbywa się za pośrednictwem Arduino
 IDE (ang.
 Integrated Development Environment).
 Jest to środowisko zawierające: 
\end_layout

\begin_layout Itemize
edytor tekstu posiadający funkcje jak podświetlanie składni, wklejania,
 kopiowania kodu, jego przszukiwanie i zamienianie czy automatycznego utrzymywan
ie wcięć,
\end_layout

\begin_layout Itemize
pole komunikatów zwracające wyniki działania Arduino Software IDE np.
 rezultat zapisywania czy eksportu oraz informujące o błędach, które wystąpiły,
\end_layout

\begin_layout Itemize
konsolę wyświetlającą wyjście Arduino Software oraz błędy występujące w
 kodzie,
\end_layout

\begin_layout Itemize
szeregowy monitor wyświetlający dane odebrane z płytki Arduino oraz umożliwiając
y wysyłanie danych do płytki.
\end_layout

\begin_layout Standard
Pliki będące wynikiem pracy w Arduino Software IDE nazywane są skeczami
 i posiadają rozszerzenie .ino.
 Arduino Software zbudowane jest na podstawie języka Processing.
\end_layout

\begin_layout Subsection
Processing
\end_layout

\begin_layout Standard
Processing jest językiem programowania IDE stworzonym przez Ben'a Fry i
 Casey'a Reas.
 Powstał w MediaLab działającym w MIT (ang.
 Massachusetts Institute of Technology).
 Prace nad nim rozpoczeły sie na potrzeby sztuki elektronicznej oraz projetkowan
ia graficznego.
 Język bazuje na jezyku Java, jednak ma uprostszoną składnię i graficzny
 model programowania.
\end_layout

\begin_layout Section
CAD
\end_layout

\begin_layout Standard
CAD (ang.
 computer aided design) jest wykorzystaniem systemów komputerowych do wspomagani
a tworzenia, modyfikacji, analizy lub optymalizacji projektu.
 Zamjduje zastosowanie w takich dziedzinach jak inzynieria mechaniczna,
 inżynieria elektryczna czy inżynieria budowlana.
\end_layout

\begin_layout Subsection
AutoCAD
\end_layout

\begin_layout Standard
Program umożliwiający projektowanie wspomagane komputerowo.
 Program stworzony został przez firmę Autodesk, a jego pierwsza wersja zaprezent
owana została na targach COMDEX w Las Vegas w listopadzie 1982 roku, sprzedaż
 produktu ruszyła miesiąc później.
 Program jest nadal rozwijany i jego najnowsza wersja nosi nazwę AutoCAD
 2016.
 AutoCAD umożliwia wspomaganie projektowania 2D, 3D oraz dzięki specjalnym
 dodatkom 2.5D.
 Pierwotnie wykorzystywany był tylko przez mechaników, jednak dzięki rozszerzeni
u programu przez wiele nakładek mp.
 AutoCAD Electrical, AtuoCAD Mechanical, Architectural Desktop, Civil Design
 itp.
 stał się platformą wykorzystywaną przez architektów i projektantów różnych
 dziedzin inżynierii.
\end_layout

\begin_layout Section
OCCT
\end_layout

\begin_layout Standard
OCCT (ang.
 OverClock Checking Tool) jest programem służącym do sprawdzania stabilności
 pracy stacji roboczej.
 Poza stabilnością sprawdzimy także temperatury osiągane przez poszczególne
 podzespoły czy napięcie występujące na tych podzespołach.
 Poza wymienionymi danymi program dostarcza również informacje o posiadanym
 procesorze czy karcie graficznej.
 Program podczas działania bardzo mocno obciąża komputer (wykorzystanie
 procesora ~98 - 100%), jednocześnie dając możliwość stałego kontrolowania
 wyżej wymienionych danych.
 W programie dostępne są cztery testy: autorski, test na bazie biblioteki
 LINPACK stworzonej przez Intel, test sprawdzający kartę graficzną pod względem
 renderowania obiektów 3D oraz test zasilacza.
 Wyniki przeprowadzonych testów obrazowane są na wykresach zapisanych na
 dysku w postaci plików .png.
\end_layout

\begin_layout Section
Catzilla
\end_layout

\begin_layout Standard
Program typu benchmark stworzony przez autorów popularnego programu ALLPlayer.
 Program wykorzystuje silnik graficzno-fizyczny stworzony przez studio Plastic.
 Catzilla testuje wydajność sprzętu komputerowego z naciskiem na jego graficzne
 możliwości.
 Poza zdolnościami do generowania grafiki program sprawdzi zdolność procesora
 do symulowania fizyki.
 Wyniki testu przedstawione są w punktach, co daje bardzo czytelny i łatwy
 do porównania wynik (im więcej punktów tym lepiej).
\end_layout

\begin_layout Chapter
Realizacja projektu systemu chłodzącego
\end_layout

\begin_layout Section
Elektroniczny układ współpracujący z Arduino
\end_layout

\begin_layout Standard
Arduino samo w sobie jest gotowe do użycie po wyjęciu z pudełka.
 Ma wyprowadzone wszelkie niezbędne piny.
 Zadaniem osoby budującej projekt na jego podstawie jest dobranie i przygotowani
e urządzeń peryferyjnych dla Arduino.
 
\end_layout

\begin_layout Subsection
Projekt układu elektronicznego
\end_layout

\begin_layout Standard
Komunikacja z mikrokontrolerem jest istotnym elementem tego projektu.
 Arduino ma pokazywać aktualną średnią temperaturę cieczy, oraz temperaturę
 po przekroczeniu której załączona zostanie pompa.
 Temperatura załączenia pompy ustawiana jest przez użytkownika.
 Tak więc do komunikacji niezbędny będzie wyświetlacz.
 Do tego typu danych wybrany został wyświetlacz LCD posiadający dwa rzędy
 znaków po 16 znaków w każdym.
 Do ustawiania temperatury wykorzystane zostały dwa przyciski monostabilne,
 których zwarcie monitorowane będzie przez mikrokontroler.
\end_layout

\begin_layout Standard
Układ elektroniczny systemu chłodzącego musi również być w stanie mierzyć
 temperaturę cieczy.
 Do tego zadania wybrane zostały dwa czujniki LM35, które cechują się szerokim
 zakresem pomiaru (od -50°C do +150°C), w którym mieści się zakres odczytywanych
 temperatur.
 Ciecz minimalnie będzie osiągała temperaturę pokojową, a maksymalnie nie
 przekroczy 100°C.
\end_layout

\begin_layout Standard
Nagrzaną przez podzespoły cieczy należy wychłodzić poza zbiornikiem z komputerem.
 Aby przetłoczyć ciecz poza pojemnik wykorzystano pompkę elektryczną, której
 wymagane zasilanie znacznie przewyższa możliwości Arduino.
 Wykorzystano więc przekaźnik, który wysterowany przez Arduino załączy pompkę
 w odpowiednim momencie.
\end_layout

\begin_layout Standard
Podsumowując, nasz układ elektroniczny składać się będzie z:
\end_layout

\begin_layout Itemize
płytki Arduino,
\end_layout

\begin_layout Itemize
wyświetlacza LCD 2 razy po 16 znaków,
\end_layout

\begin_layout Itemize
dwóch przycisków monostablinych,
\end_layout

\begin_layout Itemize
dwóch czujników temperatury LM35,
\end_layout

\begin_layout Itemize
przekaźnika,
\end_layout

\begin_layout Itemize
pompki,
\end_layout

\begin_layout Itemize
zewnętrznego źródła zasilania.
\end_layout

\begin_layout Standard
Połączenia między wszystkimi podzespołami zostały zaprojektowane zgodnie
 z notami katalogowymi poszczególnych podzespołów.
 Projekt układu elektronicznego przedstawiony został na schemacie.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename schematElektryczny.png
	width 100text%
	groupId rysunki

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat przedstawiający sposób połączenia podzespołów elektronicznych układu
 chłodzącego.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
By zobrazować połączenie między poszczególnymi elementami wykonano również
 schemat poglądowy.
 Na tym schemacie symbole zostały zastąpione grafikami przybliżający faktyczny
 wygląd poszczególnych elementów (nie zostały zachowane proporcje ze względu
 na zróżnicowany rozmiary elementów układu), oraz przedstawione wszystkie
 niezbędne fizyczne połączenia.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename schematPogladowy.png
	lyxscale 50
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Schemat poglądowy układu elektronicznego 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Wykonanie układu elektronicznego
\end_layout

\begin_layout Standard
sprawozdanie z jego wykonania
\end_layout

\begin_layout Section
Implementacja sterownika pompy chłodziwa w środowisku Wiring
\end_layout

\begin_layout Subsection
Projekt algorytmu głównego
\end_layout

\begin_layout Standard
schemat przedstawiający działanie algorytmu
\end_layout

\begin_layout Subsection
Implementacja algorytmu
\end_layout

\begin_layout Standard
kod razem z objaśnieniami
\end_layout

\begin_layout Section
System chłodzący
\end_layout

\begin_layout Subsection
Projekt systemu chłodzącego
\end_layout

\begin_layout Standard
projekt całej instalacji wraz z chłodnicą i tak dalej
\end_layout

\begin_layout Subsection
Wykonanie systemu chłodzącego
\end_layout

\begin_layout Standard
poszczególne kroki niezbędne do wykonania instalacji przedstawione na opisanych
 zdjęciach
\end_layout

\begin_layout Chapter
Testy wydajnościowe, optymalizacja osiągów stacji roboczej oraz porównanie
 wyników z danymi wyjściowymi
\end_layout

\begin_layout Standard
w tym rozdziale znajdą się opisy testów i ich przebieg, wykresy temperatur
 zmierzonych na rdzeniach procesora podczas obciażenia po wykonaniu instalacji
 oraz te przed, szybkie porównanie i podsumowanie wyników dotyczących temperatur
y 
\end_layout

\begin_layout Section
Opis zagadnienia overclockingu
\end_layout

\begin_layout Section
Opis parametrów przed optymalizacją
\end_layout

\begin_layout Section
Opis optymalizacji 
\end_layout

\begin_layout Section
Testy wydajnościowe
\end_layout

\begin_layout Section
Analiza wyników optymalizacji
\end_layout

\begin_layout Section
Analiza wyników testów wydajnościowych
\end_layout

\begin_layout Chapter
Podsumowanie
\end_layout

\begin_layout Standard
ogólne podsumowanie pracy
\end_layout

\begin_layout Standard
co udało się osiągnąć
\end_layout

\begin_layout Standard
co jest zbędne a co konieczne 
\end_layout

\begin_layout Standard
czy jest zauważalna różnica
\end_layout

\begin_layout Chapter*
Spis rysunków
\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Chapter*
Spis fotografii
\end_layout

\begin_layout Chapter*
Bibliografia
\end_layout

\end_body
\end_document
